"""
Django settings for radar_project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='django-insecure-prb7wb16_w#lofb=+_5p@ny(or&j8it*3p#+_jnc2jlpky%$5*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config(
    'DJANGO_ALLOWED_HOSTS',
    default='localhost,127.0.0.1,0.0.0.0',
    cast=lambda v: [s.strip() for s in v.split(',')]
)
if DEBUG:
    # In development, allow requests from any host (LAN devices, emulators)
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'django_extensions',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    
    # Local apps
    'radars',
    'api',
    'frontend',
]

# Disable GIS support for SQLite simplicity
# You can enable this later if you want to use PostGIS
HAS_GIS = False
# try:
#     import subprocess
#     subprocess.check_output(['gdal-config', '--version'])
#     INSTALLED_APPS.insert(-3, 'django.contrib.gis')
#     HAS_GIS = True
# except:
#     HAS_GIS = False

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'radar_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'radar_project.wsgi.application'


# Database â€” force SQLite for local/dev
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
if HAS_GIS:
    # SpatiaLite can be enabled later if desired; default to plain SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# -----------------------------------------------------------------------------
# Routing configuration
# -----------------------------------------------------------------------------
# Prefer direct PostgreSQL pgRouting instead of Docker services when enabled.
ROUTING_USE_PGROUTING = config('ROUTING_USE_PGROUTING', cast=bool, default=False)
ROUTING_PG_SCHEMA = config('ROUTING_PG_SCHEMA', default='public')
ROUTING_SNAP_TOLERANCE_M = config('ROUTING_SNAP_TOLERANCE_M', cast=int, default=2000)

# Optional external/custom routing service (kept as fallback)
ROUTING_PROVIDER = config('ROUTING_PROVIDER', default='fallback')
ROUTING_BASE_URL = config('ROUTING_BASE_URL', default='')

# External OSRM service (optional, remote)
REMOTE_OSRM_BASE_URL = config('REMOTE_OSRM_BASE_URL', default='http://87.237.239.18:3000')
REMOTE_OSRM_DEFAULT_PROFILE = config('REMOTE_OSRM_DEFAULT_PROFILE', default='driving')
CUSTOM_ROUTING_URL = config('CUSTOM_ROUTING_URL', default='')


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=DEBUG, cast=bool)
# Additional allowlist for when CORS_ALLOW_ALL_ORIGINS is False
_cors_env = config('DJANGO_CORS_ORIGINS', default='', cast=str)
_cors_extra = [s.strip() for s in _cors_env.split(',') if s.strip()]
CORS_ALLOWED_ORIGINS = list({
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    *(_cors_extra or []),
})
CORS_ALLOW_CREDENTIALS = True

# Optional CSRF trusted origins (useful when accessing via LAN IP in browser)
CSRF_TRUSTED_ORIGINS = config(
    'DJANGO_CSRF_TRUSTED_ORIGINS',
    default='',
    cast=lambda v: [s.strip() for s in v.split(',') if s.strip()]
) or []

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Login URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# drf-spectacular OpenAPI settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Radar2 API',
    'DESCRIPTION': 'API for radar data, routing, and analytics',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Routing settings
# Custom Radar2 routing service (preferred)
CUSTOM_ROUTING_URL = config('CUSTOM_ROUTING_URL', default='http://localhost:5002')

# Force enable custom routing service
import os
os.environ.setdefault('CUSTOM_ROUTING_URL', 'http://localhost:5002')

# External routing providers (fallback)
# Set the following envs to enable OSRM as secondary fallback:
#   ROUTING_PROVIDER=osrm  
#   ROUTING_BASE_URL=http://<host>:<port>
ROUTING_PROVIDER = config('ROUTING_PROVIDER', default='fallback')
ROUTING_BASE_URL = config('ROUTING_BASE_URL', default='')

# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,
}
